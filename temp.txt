from binance import ThreadedWebsocketManager
# import pandas as pd
from threading import Thread
from Utils.Logger import Logger


class SignalsBot:
    def __init__(self):
        self.__logger = Logger("Signals Bot")
        self.__api_key = "3YMYH04eaQNzYQ2Nf9ite9oc4JaxMVGqYcuImVoIhSvxpBH5teo1WNdOAwr50eMa"
        self.__api_secret = "kX2pvFSJuXqUZrbLgbnWOOgNrAOUXrbwJoMdA2xH79OzwYI7BqS8tdwE1B7wWV5k"
        self.__twm = ThreadedWebsocketManager(self.__api_key, self.__api_secret)

        self.__assets = {}
        self.__streams = {}

    def init(self):
        self.th = Thread(target=self.__initThreaded)
        self.th.run()

    def __initThreaded(self):
        self.__twm.daemon = True
        self.__twm.start()

    def stop(self):
        self.__twm.stop()

    def start(self):
        self.__twm.join()

    def __createAsset(self, asset):
        self.__assets[asset] = {}

    def __deleteAsset(self, asset):
        del self.__assets[asset]

    # def __getAssetData(self, asset):
    #     return self.__assets[asset]
    
    def __updateCallback(self, data):
        print(data["s"])
        return
        print(self.__getAssetData(data["s"]))
        if data["e"] != "error":
            self.__assets[data["s"]] = data
        else:
            self.__logger.Error("error")

    def startSocketForAsset(self, asset):
        self.__logger.Log("starting listener for " + asset)
        self.__createAsset(asset)
        streamName = self.__twm.start_symbol_ticker_socket(callback=self.__updateCallback, symbol=asset)
        self.__streams[asset] = streamName

    def stopSocketForAsset(self, asset):
        self.__logger.Log("stopping listener for " + asset)
        self.__deleteAsset(asset)
        self.__twm.stop_socket(self.__streams[asset])

